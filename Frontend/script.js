const logInput = document.getElementById("log-input");
const analyzeBtn = document.getElementById("analyze-btn");
const fileUpload = document.getElementById("file-upload");
const toggleMode = document.getElementById("toggle-mode");

const explanationOutput = document.getElementById("explanation-output");
const fixOutput = document.getElementById("fix-output");
const resultsSection = document.getElementById("results-section");
const loadingMessage = document.getElementById("loading-message");

const speakBtn = document.getElementById("speak-summary");
const stopBtn = document.getElementById("stop-summary");
const exportBtn = document.getElementById("export-pdf");

let speechUtterance;

// Dark mode toggle
toggleMode.addEventListener("click", () => {
  document.body.classList.toggle("dark");
});

// Upload log file
fileUpload.addEventListener("change", async (e) => {
  const file = e.target.files[0];
  const text = await file.text();
  logInput.value = text;
});

// Analyze log button
analyzeBtn.addEventListener("click", async () => {
  const log = logInput.value.trim();
  if (!log) return alert("Please paste or upload a log first!");

  loadingMessage.classList.remove("hidden");
  resultsSection.classList.add("hidden");

  const res = await fetch("http://127.0.0.1:8000/analyze-log", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ log }),
  });

  const data = await res.json();
  explanationOutput.innerHTML = parseMarkdown(data.explanation);
  fixOutput.innerHTML = parseMarkdown(data.suggested_fix);

  loadingMessage.classList.add("hidden");
  resultsSection.classList.remove("hidden");
});

// Speak Summary
speakBtn.addEventListener("click", () => {
  const text = explanationOutput.innerText;
  if (!text) return;

  speechUtterance = new SpeechSynthesisUtterance(text);
  const voices = speechSynthesis.getVoices().filter(v => v.lang.startsWith("en"));
  if (voices.length > 0) {
    speechUtterance.voice = voices[0];
  }
  speechSynthesis.speak(speechUtterance);
});

// Stop Summary
stopBtn.addEventListener("click", () => {
  speechSynthesis.cancel();
});

// Export to PDF (Professional & Structured)
exportBtn.addEventListener("click", async () => {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: "a4",
    putOnlyUsedFonts: true
  });

  const pageWidth = doc.internal.pageSize.getWidth();
  let cursorY = 20;

  // ðŸ§  Font Fix (use core font 'times' or 'courier' that supports UTF-8 better)
  doc.setFont("courier", "normal");

  const date = new Date().toLocaleString();

  // ðŸ“„ Cover Page
  doc.setFontSize(22);
  doc.setFont("courier", "bold");
  doc.text("CI/CD Log Analysis Report", pageWidth / 2, cursorY, { align: "center" });
  cursorY += 15;

  doc.setFontSize(13);
  doc.setFont("courier", "normal");
  doc.text(`Generated on: ${date}`, pageWidth / 2, cursorY, { align: "center" });
  cursorY += 12;

  const shortLog = logInput.value.slice(0, 400).replace(/\n/g, " ");
  doc.setFontSize(10);
  doc.setTextColor(80);
  doc.text(`Log Preview:\n${shortLog || "No log available"}`, 50, cursorY, { maxWidth: pageWidth - 28 });

  doc.addPage();
  cursorY = 20;

  // ðŸ“„ Explanation
  doc.setTextColor(0);
  doc.setFontSize(15);
  doc.setFont("courier", "bold");
  doc.text("Explanation", 14, cursorY);
  cursorY += 10;

  doc.setFontSize(11);
  doc.setFont("courier", "normal");
  const explanationLines = doc.splitTextToSize(explanationOutput.innerText, pageWidth - 28);
  doc.text(explanationLines, 14, cursorY);
  cursorY += explanationLines.length * 6 + 10;

  // ðŸ›  Suggested Fix
  doc.setFontSize(15);
  doc.setFont("courier", "bold");
  doc.text("Suggested Fix", 14, cursorY);
  cursorY += 10;

  doc.setFontSize(11);
  doc.setFont("courier", "normal");
  const fixLines = doc.splitTextToSize(fixOutput.innerText, pageWidth - 28);
  doc.text(fixLines, 14, cursorY);

  // Footer
  doc.setFontSize(9);
  doc.setTextColor(120);
  doc.text("Generated by Smart Log Analyzer â€¢ " + date, 14, doc.internal.pageSize.height - 10);

  doc.save(`log-report-${new Date().toISOString().slice(0, 19)}.pdf`);
});


// Markdown to HTML
function parseMarkdown(text = "") {
  return text
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
    .replace(/\n/g, "<br>");
}
